{"version":3,"sources":["brew.js","admin/admin.module.js","core/core.module.js","admin/controllers/admin.ctrl.js","admin/controllers/edit.ctrl.js","core/controllers/contact.ctrl.js","core/controllers/home.ctrl.js","core/directives/brTopNav.directive.js","core/models/breweries.model.js","core/services/brewery.service.js"],"names":["angular","module","configure","$stateProvider","state","url","templateUrl","controller","resolve","breweries","BreweryService","search","brewery","$stateParams","find","id","config","$inject","$urlRouterProvider","$locationProvider","$httpProvider","$mdThemingProvider","otherwise","onEnter","html5Mode","theme","primaryPalette","dark","runApp","run","constant","toastr","AdminCtrl","activate","vm","getBreweries","this","filter","EditCtrl","$state","$mdDialog","save","update","then","go","remove","event","confirm","title","name","ariaLabel","ok","cancel","targetEvent","show","removeBrewery","_id","ContactCtrl","$http","$timeout","$scope","send","post","input","success","contactForm","$setPristine","message","error","response","status","HomeCtrl","setCityFilter","city","cityFilter","address","cities","getCities","brTopNav","link","directive","restrict","replace","Breweries","$resource","service","method","factory","$q","defer","query","$promise","reject","promise","get","forEach","value","indexOf","push","removeIdx","idx","splice"],"mappings":"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","file":"dist/js/app-e67b0f9e.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('brew', [\n            'brew.core',\n            'brew.admin',\n            'brewE2E'\n        ]);\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.admin', [\n            'brew.core'\n        ]);\n    /*\n    \tSince we depend on brew.core, this module will get all of brew.core's services, models, filters, and directives\n    \tas well as access to brew.core's module dependencies, such as ngResource, ngMaterial, etc.\n     */\n\n    angular.module('brew.admin').config(configure);\n\n\t/*@ngInject*/\n\tfunction configure($stateProvider, toastr) {\n\n\t\ttoastr.info('brew.admin configure');\n\n\t\t/*\n\t\t\tBelow is an example of child routing. The '.' in the state name automatically tells\n\t\t\tui-router that this is a child of 'adminbrew'. You can also use the 'parent' parameter\n\t\t\tto define a route as a child. When a child route is called, the parent will also be created,\n\t\t\tif it has not been already, and the child template will be injected into a ui-view on\n\t\t\tthe parent. Child routes inherit resolve and 'data' dependencies from the parent. A child\n\t\t\tURL is the parent URL + child URL. So the actual adminbrew.edit URL below is /ajs/adminbrew/:id\n\t\t */\n\n\t\t$stateProvider\n\t\t\t.state('adminbrew', {\n      \t\t\turl: '/ajs/adminbrew',\n      \t\t\ttemplateUrl: 'app/js/admin/views/admin.view.html',\n      \t\t\tcontroller: 'AdminCtrl as admin',\n      \t\t\tresolve: {\n      \t\t\t\tbreweries: /*@ngInject*/ [\"BreweryService\", function(BreweryService) {\n      \t\t\t\t\treturn BreweryService.search();\n      \t\t\t\t}]\n      \t\t\t}\n    \t\t})\n    \t\t.state('adminbrew.edit', {\n      \t\t\turl: '/:id',\n      \t\t\ttemplateUrl: 'app/js/admin/views/edit.view.html',\n      \t\t\tcontroller: 'EditCtrl as edit',\n      \t\t\tresolve: {\n      \t\t\t\tbrewery: /*@ngInject*/ [\"BreweryService\", \"$stateParams\", function(BreweryService, $stateParams) {\n      \t\t\t\t\treturn BreweryService.find($stateParams.id);\n      \t\t\t\t}]\n      \t\t\t}\n    \t\t});\n    }\n    configure.$inject = [\"$stateProvider\", \"toastr\"];\n})();","/* global toastr:false, moment:false */\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('brew.core', [\r\n            'ngResource',\r\n            'ngAnimate',\r\n            'ngMessages',\r\n            'ngAria',\r\n            'ngMaterial',\r\n            'ui.router',\r\n            'ngMockE2E'\r\n        ]);\r\n    /* REMOVE ngMockE2E when not using mocked backend */\r\n\r\n    angular.module('brew.core').config(configure);\r\n\tangular.module('brew.core').run(runApp);\r\n\r\n    //allow javascript libraries to be injected, instead of using them as globals\r\n    angular.module('brew.core').constant('toastr', toastr);\r\n\r\n\t/*@ngInject*/\r\n\tfunction configure($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, $mdThemingProvider, toastr) {\r\n\r\n        /*\r\n            Angular config functions run before services are created. And as such, services cannot be injected into them,\r\n            only the service providers. This section is used then to configure the service provider's configuration and\r\n            behavior for use when the services are themselves created.\r\n         */\r\n\t\t\r\n\t\t$urlRouterProvider.otherwise('/ajs/home');\r\n\r\n\t\t$stateProvider\r\n\t\t\t.state('home', {\r\n      \t\t\turl: '/ajs/home',\r\n      \t\t\ttemplateUrl: 'app/js/core/views/home.view.html',\r\n      \t\t\tcontroller: 'HomeCtrl as home',\r\n      \t\t\tresolve: {\r\n      \t\t\t\tbreweries: /*@ngInject*/ [\"BreweryService\", function(BreweryService) {\r\n                        /*\r\n                            Resolves are run before the controller is instantiated. They can then be injected into the\r\n                            controller with the name of the map key, in this case 'breweries'. This helps prevent\r\n                            the controller and view from loading without the data it needs to display properly, generally\r\n                            from http calls. Resolve functions should return a promise that resolves with the data to\r\n                            populate the map key with.\r\n                         */\r\n      \t\t\t\t\treturn BreweryService.search();\r\n      \t\t\t\t}]\r\n      \t\t\t}\r\n    \t\t})\r\n    \t\t.state('about', {\r\n      \t\t\turl: '/ajs/about',\r\n      \t\t\ttemplateUrl: 'app/js/core/views/about.view.html',\r\n      \t\t\tcontroller: 'HomeCtrl as home',\r\n      \t\t\tonEnter: /*@ngInject*/ function() {\r\n  \t\t\t\t\t//onEnter can be used to set things like page titles\r\n      \t\t\t}\r\n    \t\t})\r\n    \t\t.state('contact', {\r\n      \t\t\turl: '/ajs/contact',\r\n      \t\t\ttemplateUrl: 'app/js/core/views/contact.view.html',\r\n      \t\t\tcontroller: 'ContactCtrl as contact'\r\n    \t\t})\r\n    \t\t.state('unknown', {\r\n      \t\t\turl: '/ajs/unknown',\r\n      \t\t\ttemplateUrl: 'app/js/core/views/unknown.view.html',\r\n      \t\t\tcontroller: 'HomeCtrl as home'\r\n    \t\t});\r\n\t\t\r\n        //use normal looking URL paths instead of hashbang mode '#'\r\n\t\t$locationProvider.html5Mode(true);\r\n\r\n        $mdThemingProvider.theme('docs-dark', 'default').primaryPalette('yellow').dark();\r\n\r\n\t\ttoastr.options.closeButton = true;\r\n\t\ttoastr.options.positionClass = 'toast-bottom-right';\r\n\t}\n\tconfigure.$inject = [\"$stateProvider\", \"$urlRouterProvider\", \"$locationProvider\", \"$httpProvider\", \"$mdThemingProvider\", \"toastr\"];\r\n\r\n\t//Although $state is not used below, it cannot be removed, as injecting it here kickstarts the ui-router\r\n\t/*@ngInject*/\r\n\tfunction runApp($rootScope, $state) {\r\n        /*\r\n            Functionality to perform when the application first loads, after the configuration occurs. When using ui-router,\r\n            it is a good idea to inject $state here, as it forces the ui-router state to instantiate immediatly, and allows\r\n            routing to work properly. This is not needed when using the built-in (default) angular router.\r\n         */\r\n\t}\n\trunApp.$inject = [\"$rootScope\", \"$state\"];\r\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.admin')\n        .controller('AdminCtrl', AdminCtrl);\n\n    /* @ngInject */\n    function AdminCtrl(BreweryService, toastr) {\n        /*jshint validthis: true */\n        var vm = this;\n\n        vm.breweries = [];\n        vm.filter = null;\n\n        activate();\n\n        //////PRIVATE//////////////\n\n        function activate() {\n        \tvm.breweries = BreweryService.getBreweries();\n        }\n    }\n    AdminCtrl.$inject = [\"BreweryService\", \"toastr\"];\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.admin')\n        .controller('EditCtrl', EditCtrl);\n\n    /* @ngInject */\n    function EditCtrl($state, $mdDialog, BreweryService, brewery, toastr) {\n        /*jshint validthis: true */\n        var vm = this;\n\n        vm.brewery = brewery;\n        vm.save = save;\n        vm.remove = remove;\n\n        activate();\n\n        toastr.info('Edit: ' + brewery.name);\n\n        /////////////////////////\n        \n        function save() {\n        \tBreweryService.update(vm.brewery).then(function() {\n        \t\t$state.go('^'); //navigate back to the parent route\n        \t});\n        }\n\n        function remove(event) {\n        \tvar confirm = $mdDialog.confirm()\n      \t\t\t.title('Are you sure you want to delete ' + vm.brewery.name + '?')\n      \t\t\t.ariaLabel('Confirm Delete')\n      \t\t\t.ok('Delete!')\n      \t\t\t.cancel('Cancel')\n      \t\t\t.targetEvent(event);\n    \t\t\n    \t\t$mdDialog.show(confirm).then(function() {\n      \t\t\tBreweryService.removeBrewery(vm.brewery._id);\n      \t\t\t$state.go('^'); //this navigates regardless of the removeBrewery call. Normally this should be wrapped in the remove resolve function\n    \t\t});\n        }\n\n        //////PRIVATE////////////\n\n        function activate() {\n        }\n    }\n    EditCtrl.$inject = [\"$state\", \"$mdDialog\", \"BreweryService\", \"brewery\", \"toastr\"];\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.core')\n        .controller('ContactCtrl', ContactCtrl);\n\n    /* @ngInject */\n    function ContactCtrl($http, $timeout, $scope) {\n        /*jshint validthis: true */\n        var vm = this;\n\n        vm.input = {};    //ALL manipulatable data should be on Objects, and not vm.firstName, vm.lastName, etc, especially when working with $scope\n        vm.message = null;\n        vm.send = send;\n\n        activate();\n\n        ///////////////////////////\n\n        function send() {\n        \t$http.post('/api/contactus', vm.input).success(function() {\n        \t\tvm.input = {};\n        \t\t$scope.contactForm.$setPristine();\n        \t\tvm.message = 'Successfully submitted the contact form.';\n        \t\t$timeout(function() {\n        \t\t\tvm.message = null;\n        \t\t}, 5000);\n        \t}).error(function(response, status) {\n        \t\tvm.message = 'Error: error posting message: ' + status;\n        \t});\n        }\n\n        //////////PRIVATE//////////\n\n        function activate() {\n        }\n    }\n    ContactCtrl.$inject = [\"$http\", \"$timeout\", \"$scope\"];\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.core')\n        .controller('HomeCtrl', HomeCtrl);\n\n    /* @ngInject */\n    function HomeCtrl(BreweryService) {\n        /*jshint validthis: true */\n        var vm = this;\n\n        vm.breweries = [];\n        vm.cities = [];\n        vm.cityFilter = null;\n\n        vm.setCityFilter = setCityFilter;\n        vm.removeBrewery = removeBrewery;\n\n        activate();\n\n        ///////////////////////////\n\n        function setCityFilter(city) {\n        \tvm.cityFilter = (city) ? { address: { city: city }} : null;\n        }\n\n        function removeBrewery(id) {\n        \tBreweryService.removeBrewery(id);\n        }\n\n        //////PRIVATE//////////////\n\n        /*\n            Separate out private functions from functions and data attached to the controller instance\n            to aid in readability and maintainability.\n         */\n        \n        function activate() {\n        \tvm.breweries = BreweryService.getBreweries();\n        \tvm.cities = BreweryService.getCities();\n        }\n    }\n    HomeCtrl.$inject = [\"BreweryService\"];\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.core')\n        .directive('brTopNav', brTopNav);\n\n    /* @ngInject */\n    function brTopNav () {\n        // Usage:\n        //  <br-top-nav></br-top-nav>\n        // Creates:\n        //  The top toolbar and nav element for the main pages\n        var directive = {\n            link: link,\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'app/js/core/directives/brTopNav.html'\n        };\n\n        return directive;\n\n        function link(scope, element, attrs) {\n            /*\n                Link is called before the controller, but after \"compile\". Link is where\n                you can attach data to scope, and modify the compiled DOM template. With\n                the exception of the compile function, this should be the ONLY place in\n                the code where direct DOM access and manipulation can occur. The controller,\n                not defined here, is where callbacks and logic should reside.\n             */\n        }\n    }\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.core')\n        .factory('Breweries', Breweries);\n\n    /* @ngInject */\n    function Breweries($resource) {\n        //user $resource to simplify CRUD calls to properly defined REST APIs\n        //only 'PUT' is missing from the initial object creation, so add it below\n        var service = $resource('/api/breweries/:id', { id : '@_id' }, {\n        \tupdate: {\n        \t\tmethod: 'PUT'\n        \t}\n        });\n\n        return service;\n    }\n    Breweries.$inject = [\"$resource\"];\n})();","(function() {\n    'use strict';\n\n    angular\n        .module('brew.core')\n        .factory('BreweryService', BreweryService);\n\n    /* @ngInject */\n    function BreweryService(Breweries, $q, toastr) {\n        var service = {\n            search: search,\n            find: find,\n            getBreweries: getBreweries,\n            getCities: getCities,\n            removeBrewery: removeBrewery,\n            update: update\n        };\n\n        //in most browsers variables must be defined prior to the return statement\n        var breweries;\n\n        return service;\n\n        ////////////////\n\n        function search() {\n            //use $q to create a deferment and promise, since we need to use the\n            //promise from the Model to set data within the service.\n        \tvar defer = $q.defer();\n            toastr.info('Brewery.search()');\n        \tBreweries.query().$promise.then(function(response) {\n\t        \t\tbreweries = response;\n\t        \t\tdefer.resolve(response);\n\t        \t}, function(response) {\n\t        \t\tbreweries = null;\n\t        \t\tdefer.reject(response);\n\t        \t});\n        \treturn defer.promise;\n        }\n\n        function find(_id) {\n            toastr.info('Brewery.find(' + _id + ')');\n            return Breweries.get({ id: _id }).$promise;\n        }\n\n        function getBreweries() {\n        \treturn breweries;\n        }\n\n        function getCities() {\n        \tvar cities = [];\n        \tangular.forEach(breweries, function(value, idx) {\n        \t\tif(cities.indexOf(value.address.city) === -1) {\n                    cities.push(value.address.city);\n                }\n        \t});\n        \treturn cities;\n        }\n\n        function removeBrewery(_id) {\n            toastr.info('Brewery.removeBrewery(' + _id + ')');\n        \tvar removeIdx;\n        \tangular.forEach(breweries, function(value, idx) {\n        \t\tif(value._id === _id) {\n        \t\t\tremoveIdx = idx;\n        \t\t}\n        \t});\n        \tif(removeIdx || removeIdx === 0) {\n        \t\tbreweries.splice(removeIdx, 1);\n        \t}\n            return Breweries.delete({ id: _id }).$promise;\n        }\n\n        function update(brewery) {\n            toastr.info('Brewery.update(' + brewery._id + ')');\n            angular.forEach(breweries, function(value, idx) {\n                if(value._id === brewery._id) {\n                    breweries[idx] = brewery;\n                }\n            });\n            return Breweries.update(brewery).$promise;\n        }\n    }\n    BreweryService.$inject = [\"Breweries\", \"$q\", \"toastr\"];\n})();"],"sourceRoot":"/source/"}